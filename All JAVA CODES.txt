**************************************************JAVA PRACTICALS******************************************

Slip 1

1)
import java.util.*;
import java.io.*;

public class ArrayListDemo 
{
    public static void main(String args[]) throws Exception 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        ArrayList al = new ArrayList();

        System.out.println("\nHow many City?");
        int n = Integer.parseInt(br.readLine());
        System.out.println("\n Enter City names:");

        for (int i =0  ; i <= n; i++) 
        {
            al.add(br.readLine());
        }
        System.out.println("Entered cities are :" + al);
        al.removeAll(al);
        System.out.println("All cities are removed from the ArrayList:" + al);
    }
}

2)
***************************************************************************************************************
Slip 2

1)
import java.util.*;
import java.io.*;

public class LinkedListDemo 
{
    public static void main(String args[]) throws Exception
    {
        int n;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        LinkedList li = new LinkedList();

        System.out.println("\nEnter number of your friends:");
        n = Integer.parseInt(br.readLine());

        System.out.println("\nEnter your friends' names:");
        for (int i = 1; i <= n; i++) 
        {
            li.add(br.readLine());
        }

        System.out.println("\nLinked List content is: " + li);
    }
}


2)
***************************************************************************************************************
Slip 3

1)
import java.util.*;

class TreeSetDemo {
    public static void main(String args[]) {
        TreeSet ts = new TreeSet();
        ts.add("Red");
        ts.add("Yellow");
        ts.add("Blue");
        ts.add("Black");
        ts.add("Orange");
        ts.add("Green");

        System.out.println("TreeSet is: " + ts);
    }
}




2)
/////Customer.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action="Customer" method="GET">
            Enter Customer No:<input type="text" name="t1">
            <input type="submit" value="Submit">
        </form>

</body>
</html>
---------------------------------
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class Customer
 */
@WebServlet("/Customer")
public class Customer extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    
    Connection cn;
    public void init()
    {
       try
       {
            Class.forName("org.postgresql.Driver");
            cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word");
            
       }
       catch(Exception ce)
       {   
           System.out.println("Error"+ce.getMessage());
       }
 
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//response.getWriter().append("Served at: ").append(request.getContextPath());
	
	
	
		response.setContentType("text/html");
        PrintWriter out=response.getWriter();        
        try
        {
 
     /*   	Class.forName("org.postgresql.Driver");
           Connection cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word"); */      	
        	int id=Integer.parseInt(request.getParameter("t1"));           
            
			String qry="select * from Customer1 where id="+id;
			
            
            Statement st=cn.createStatement();
            ResultSet rs=st.executeQuery(qry); 
            
            while(rs.next()) {
                out.print("<table border=1>");
                out.print("<tr>");
                out.print("<td>" + rs.getInt(1) + "</td>");
                out.print("<td>" + rs.getString(2) + "</td>");
                
                out.print("</tr>");
                out.print("</table>");
            
            }
        }
        catch(Exception se){
        	out.print(se);
        }
        out.close();
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

***************************************************************************************************************
Slip 4
1)
import java.util.*;
import java.io.*;

class HashTableDemo {
    public static void main(String args[]) {
        Hashtable ht = new Hashtable();
        Enumeration names;
        String str;

        ht.put("Amar", new Long(2222222222L));
        ht.put("Anil", new Long(3333333333L));
        ht.put("Soham", new Long(8888888888L));
        ht.put("Kiran", new Long(9999999999L));
        ht.put("Williams", new Long(4444444444L));

        names = ht.keys();
        while (names.hasMoreElements()) {
            str = (String) names.nextElement();
            System.out.println(str + ": " + ht.get(str));
        }
    }
}

---------------
2)
html
---------------
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
 <form method="post" action="CookieDemo">
<input type="radio" name="sub" value="Maths"> Maths <br>
  <input type="radio" name="sub" value="Physics"> Physics <br>    
<input type="radio" name="sub" value="Chemistry"> Chemistry<br>
        <input type="radio" name="sub" value="Biology"> Biology <br>
  <input type="submit" value="Submit">
    </form>   
     <form method="get" action="CookieDemo">  
  <input type="submit" value="reset">
    </form>

</body>
</html>
-----------------------------------------
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class CookieDemo
 */
@WebServlet("/CookieDemo")
public class CookieDemo extends HttpServlet {
    private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#HttpServlet()
     */
    public CookieDemo() {
        super();
        // TODO Auto-generated constructor stub
    }

    /**
     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        // response.getWriter().append("Served at: ").append(request.getContextPath());

        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        String s = request.getParameter("sub");

        Cookie c = new Cookie("sub", null); 
        out.println("Reset....");
    }

    /**
     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        doGet(request, response);
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        String s = request.getParameter("sub");
        
        Cookie c1 = new Cookie("sub", s);
        out.println("You have selected the subject: " + c1.getValue());
    }
}

***************************************************************************************************************
Slip 5

1)
import java.util.*;
import java.io.*;

class SETB1 {
    public static void main(String[] args) throws Exception {
        int no, element, i;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        TreeSet ts = new TreeSet();

        System.out.println("Enter the number of elements:");
        no = Integer.parseInt(br.readLine());

        for (i = 0; i < no; i++) {
            System.out.println("Enter the element: ");
            element = Integer.parseInt(br.readLine());
            ts.add(element);
        }

        System.out.println("The elements in sorted order: " + ts);

        System.out.println("Enter element to be searched: ");
        element = Integer.parseInt(br.readLine());

        if (ts.contains(element))
            System.out.println("Element is found");
        else
            System.out.println("Element is NOT found");
    }
}



2)
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.ResultSet"%>
<%@page import="java.sql.Statement"%>
<%@page import="java.sql.Connection"%>

<%
String id = request.getParameter("userId");
String driverName = "org.postgresql.Driver";
String connectionUrl = "jdbc:postgresql:";
String dbName = "tybcs";
String userId = "postgres";
String password = "Pass@word";

try {
Class.forName(driverName);
} catch (ClassNotFoundException e) {
e.printStackTrace();
}

Connection connection = null;
Statement statement = null;
ResultSet resultSet = null;
%>
<h2 align="center"><font><strong>Retrieve data from database in jsp</strong></font></h2>
<table align="center" cellpadding="5" cellspacing="5" border="1">
<tr>

</tr>
<tr bgcolor="blue">
<td><b>Patient No</b></td>
<td><b>Patient Name</b></td>
<td><b>Patient Address</b></td>
<td><b>Patient Age</b></td>
<td><b>Patient Diseases</b></td>
</tr>
<%
try{ 
connection = DriverManager.getConnection(connectionUrl+dbName, userId, password);
statement=connection.createStatement();
String sql ="SELECT * FROM Patient";

resultSet = statement.executeQuery(sql);
while(resultSet.next()){
	
%>
<tr bgcolor="#DEB887">

<td><%=resultSet.getInt("pid") %></td>
<td><%=resultSet.getString("pname") %></td>
<td><%=resultSet.getString("padd") %></td>
<td><%=resultSet.getInt("page") %></td>
<td><%=resultSet.getString("pdis") %></td>

</tr>

<% 
}

} catch (Exception e) {
e.printStackTrace();
}
%></table>
</body>
</html>

***************************************************************************************************************
Slip 6

1)
import java.util.*;

class HashMapDemo {
    public static void main(String args[]) {
        HashMap<Integer, String> ha = new HashMap<>();
        ha.put(10, "Java");
        ha.put(20, "Operating System");
        ha.put(30, "SoftwareTesting Tools");
        ha.put(40, "Compiler Constructor");
        ha.put(50, "Web Technologies");

        // Before Sorting
        System.out.println("Before Sorting:");
        Set<Map.Entry<Integer, String>> set = ha.entrySet();
        Iterator<Map.Entry<Integer, String>> it = set.iterator();
        while (it.hasNext()) {
            Map.Entry<Integer, String> me = it.next();
            System.out.print(me.getKey() + ": ");
            System.out.println(me.getValue());
        }

        // After Sorting (Using TreeMap)
        Map<Integer, String> map = new TreeMap<>(ha);  // Sorting by keys with TreeMap
        System.out.println("After Sorting:");
        Set<Map.Entry<Integer, String>> set1 = map.entrySet();
        Iterator<Map.Entry<Integer, String>> it2 = set1.iterator();
        while (it2.hasNext()) {
            Map.Entry<Integer, String> me2 = it2.next();
            System.out.print(me2.getKey() + ": ");
            System.out.println(me2.getValue());
        }
    }
}



2)
HelloBeans.java
-----------------
import java text. DateFormat;
import java. text. SimpleDateFormat;
import  java.util.*;

public class HelloBeans
{
	Private String name;
	public void getName()
	{
		System.out.println ("Your name is: "+name); 

		public public void setName()
		{
			this.name =name;
		}
		public void getCurrentDateTimeUsingDate()

		Date date = new Date(0);

		String strDateFormat= "hh:mm:ss  a";

		DateFormat dateFormat = new SimpleDateFormat(str DateFormat);

		String formattedDate= dateFormat. format(date);

		System.out.println(" Current time of the date: " +formattedDate);
	}
}

------------
MainApp.java
-------------
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp 
{
	public static void main(String args[])
	{
        	ApplicationContext context = new ClassPathXmlApplicationContext("Beans.xml");
      		HelloBeans hb = (HelloBeans) context.getBean("helloworld");
        	hb.getName();
        	hb.getCurrentDateTimeUsingDate();
    	}
}


***************************************************************************************************************
Slip 7

1)
import java.util.*;
import java.io.*;

public class Phonebook {
    public static void main(String args[]) {
        try {
            // Corrected FileInputStream path
            FileInputStream fis = new FileInputStream("myfile.txt");
            Scanner sc = new Scanner(fis); // Default scanner behavior
            
            Hashtable<String, String> ht = new Hashtable<String, String>();
            String[] strarray;
            String a, str;
            
            // Reading the file line by line
            while (sc.hasNextLine()) {
                a = sc.nextLine();
                strarray = a.split("\t");  // Split explicitly by tab character
                
                // Ensure the line contains both name and phone number
                if (strarray.length < 2) {
                    System.out.println("Skipping invalid line: " + a);
                    continue;  // Skip invalid lines
                }
                
                // Trim spaces before adding to hashtable
                ht.put(strarray[0].trim(), strarray[1].trim());
                System.out.println("Hashtable values are: " + strarray[0].trim() + ": " + strarray[1].trim());
            }
            
            // Reading user input
            Scanner s = new Scanner(System.in);
            System.out.println("Enter the name as given in the phone book:");
            str = s.nextLine().trim();  // Use nextLine to capture full input
            
            // Check if name exists in hashtable
            if (ht.containsKey(str)) {
                System.out.println("Phone no is: " + ht.get(str));  // Corrected method call
            } else {
                System.out.println("Name is not matching with the phone book");
            }
            
        } catch (FileNotFoundException e) {
            System.out.println("The file was not found: " + e.getMessage());
        } catch (Exception e) {
            System.out.println(e);  // Handle other exceptions
        }
    }
}



2)
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class serverInfo extends HttpServlet implements Servlet {
    
    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {
        res.setContentType("text/html");
        PrintWriter pw = res.getWriter();
        
        pw.println("<html><body><h2>Information about Http Request</h2>");
        pw.println("<br>Server Name: " + req.getServerName());
        pw.println("<br>Server Port: " + req.getServerPort());
        pw.println("<br>Ip Address: " + req.getRemoteAddr());
        // pw.println("<br>Server Path: " + req.getServerPath());
        pw.println("<br>Client Browser: " + req.getHeader("User-Agent"));
        pw.println("</body></html>");
        
        pw.close();
    }
}

***************************************************************************************************************
Slip 8

1)
import java.util.*;

class MyThread extends Thread
{
	String message="";
	int n;
	MyThread(String message,int n)
	{
		this.message = message;
		this.n = n;
	}
	public void run()
	{
		try
		{
			for(int i=0;i<n;i++)
			{
				System.out.println(message+" "+i+"Times ");
	
			}
		}catch(Exception e) {
			
		}
	}
}
public class Covid_SETA {
	public static void main(String args[])
	{
		int n= 10;
		MyThread t1 = new MyThread("Covid10",n);
		System.out.println(t1);
		t1.start();
		MyThread t2 = new MyThread("LOCKDOWN20",n+10);
		System.out.println(t2);
		t2.start();
		MyThread t3 = new MyThread("Vaccinated20",n+20);
		System.out.println(t3);
		t3.start();
	}
}




2)
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class serverInfo extends HttpServlet implements Servlet {
    
    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {
        res.setContentType("text/html");
        PrintWriter pw = res.getWriter();
        
        pw.println("<html><body><h2>Information about Http Request</h2>");
        pw.println("<br>Server Name: " + req.getServerName());
        pw.println("<br>Server Port: " + req.getServerPort());
        pw.println("<br>Ip Address: " + req.getRemoteAddr());
        // pw.println("<br>Server Path: " + req.getServerPath());
        pw.println("<br>Client Browser: " + req.getHeader("User-Agent"));
        pw.println("</body></html>");
        
        pw.close();
    }
}

***************************************************************************************************************
Slip 9

1)
class MyThreadDemo {
    public static void main(String args[]) {
        Thread t = Thread.currentThread();
        System.out.println("Current Thread is: " + t);

        // Changing the thread name
        t.setName("Demo Thread");
        System.out.println("After changing the name, thread is: " + t);

        try {
            for (int n = 100; n > 0; n--) {
                System.out.println(n);
                Thread.sleep(1); // Pause for 6 seconds
            }
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted");
        }
    }
}



2)
/////Customer.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action="Customer" method="GET">
            Enter Customer No:<input type="text" name="t1">
            <input type="submit" value="Submit">
        </form>

</body>
</html>
---------------------------------
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class Customer
 */
@WebServlet("/Customer")
public class Customer extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    
    Connection cn;
    public void init()
    {
       try
       {
            Class.forName("org.postgresql.Driver");
            cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word");
            
       }
       catch(Exception ce)
       {   
           System.out.println("Error"+ce.getMessage());
       }
 
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//response.getWriter().append("Served at: ").append(request.getContextPath());
	
	
	
		response.setContentType("text/html");
        PrintWriter out=response.getWriter();        
        try
        {
 
     /*   	Class.forName("org.postgresql.Driver");
           Connection cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word"); */      	
        	int id=Integer.parseInt(request.getParameter("t1"));           
            
			String qry="select * from Customer1 where id="+id;
			
            
            Statement st=cn.createStatement();
            ResultSet rs=st.executeQuery(qry); 
            
            while(rs.next()) {
                out.print("<table border=1>");
                out.print("<tr>");
                out.print("<td>" + rs.getInt(1) + "</td>");
                out.print("<td>" + rs.getString(2) + "</td>");
                
                out.print("</tr>");
                out.print("</table>");
            
            }
        }
        catch(Exception se){
        	out.print(se);
        }
        out.close();
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

***************************************************************************************************************
Slip 10

1)
import java.util.*;
import java.io.*;

public class ArrayListDemo 
{
    public static void main(String args[]) throws Exception 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        ArrayList al = new ArrayList();

        System.out.println("\nHow many City?");
        int n = Integer.parseInt(br.readLine());
        System.out.println("\n Enter City names:");

        for (int i =0  ; i <= n; i++) 
        {
            al.add(br.readLine());
        }
        System.out.println("Entered cities are :" + al);
        al.removeAll(al);
        System.out.println("All cities are removed from the ArrayList:" + al);
    }
}

------
2)
html
------
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
 <form method="post" action="CookieDemo">
<input type="radio" name="sub" value="Maths"> Maths <br>
  <input type="radio" name="sub" value="Physics"> Physics <br>    
<input type="radio" name="sub" value="Chemistry"> Chemistry<br>
        <input type="radio" name="sub" value="Biology"> Biology <br>
  <input type="submit" value="Submit">
    </form>   
     <form method="get" action="CookieDemo">  
  <input type="submit" value="reset">
    </form>

</body>
</html>
-----------------------------------------
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class CookieDemo
 */
@WebServlet("/CookieDemo")
public class CookieDemo extends HttpServlet {
    private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#HttpServlet()
     */
    public CookieDemo() {
        super();
        // TODO Auto-generated constructor stub
    }

    /**
     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        // response.getWriter().append("Served at: ").append(request.getContextPath());

        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        String s = request.getParameter("sub");

        Cookie c = new Cookie("sub", null); 
        out.println("Reset....");
    }

    /**
     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        doGet(request, response);
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        String s = request.getParameter("sub");
        
        Cookie c1 = new Cookie("sub", s);
        out.println("You have selected the subject: " + c1.getValue());
    }
}

***************************************************************************************************************
Slip 11

1)
import java.util.*;
import java.io.*;

public class LinkedListDemo 
{
    public static void main(String args[]) throws Exception
    {
        int n;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        LinkedList li = new LinkedList();

        System.out.println("\nEnter number of your friends:");
        n = Integer.parseInt(br.readLine());

        System.out.println("\nEnter your friends' names:");
        for (int i = 1; i <= n; i++) 
        {
            li.add(br.readLine());
        }

        System.out.println("\nLinked List content is: " + li);
    }
}


2)
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.ResultSet"%>
<%@page import="java.sql.Statement"%>
<%@page import="java.sql.Connection"%>

<%
String id = request.getParameter("userId");
String driverName = "org.postgresql.Driver";
String connectionUrl = "jdbc:postgresql:";
String dbName = "tybcs";
String userId = "postgres";
String password = "Pass@word";

try {
Class.forName(driverName);
} catch (ClassNotFoundException e) {
e.printStackTrace();
}

Connection connection = null;
Statement statement = null;
ResultSet resultSet = null;
%>
<h2 align="center"><font><strong>Retrieve data from database in jsp</strong></font></h2>
<table align="center" cellpadding="5" cellspacing="5" border="1">
<tr>

</tr>
<tr bgcolor="blue">
<td><b>Patient No</b></td>
<td><b>Patient Name</b></td>
<td><b>Patient Address</b></td>
<td><b>Patient Age</b></td>
<td><b>Patient Diseases</b></td>
</tr>
<%
try{ 
connection = DriverManager.getConnection(connectionUrl+dbName, userId, password);
statement=connection.createStatement();
String sql ="SELECT * FROM Patient";

resultSet = statement.executeQuery(sql);
while(resultSet.next()){
	
%>
<tr bgcolor="#DEB887">

<td><%=resultSet.getInt("pid") %></td>
<td><%=resultSet.getString("pname") %></td>
<td><%=resultSet.getString("padd") %></td>
<td><%=resultSet.getInt("page") %></td>
<td><%=resultSet.getString("pdis") %></td>

</tr>

<% 
}

} catch (Exception e) {
e.printStackTrace();
}
%></table>
</body>
</html>

***************************************************************************************************************
Slip 12

1)
import java.util.*;

class TreeSetDemo {
    public static void main(String args[]) {
        TreeSet ts = new TreeSet();
        ts.add("Red");
        ts.add("Yellow");
        ts.add("Blue");
        ts.add("Black");
        ts.add("Orange");
        ts.add("Green");

        System.out.println("TreeSet is: " + ts);
    }
}


2)
Hellobeans.java
--------------
package springDemo;

public class HelloBeans
{
private String name;

public void getName(){
 System.out.println("Your message is:" +name);
}

 public void setName()
{
this. name =name;
}
}
----------------
MainApp.java
----------------
import org. springframework.context.Application Context;

import org.springframework. context.ClassPathXml ApplicationContext;

public class MainApp
{
public static void main(String args[])
{
ApplicationContext context = new ClassPathXml ApplicationContext("Beans.xml"); 
 Hello Beans hb = (HelloBeans)context.getBeans ("helloworld");
}
}
----------------
Beans.xml
----------------

***************************************************************************************************************
Slip 13

1)
import java.util.*;
import java.io.*;

class HashTableDemo {
    public static void main(String args[]) {
        Hashtable ht = new Hashtable();
        Enumeration names;
        String str;

        ht.put("Amar", new Long(2222222222L));
        ht.put("Anil", new Long(3333333333L));
        ht.put("Soham", new Long(8888888888L));
        ht.put("Kiran", new Long(9999999999L));
        ht.put("Williams", new Long(4444444444L));

        names = ht.keys();
        while (names.hasMoreElements()) {
            str = (String) names.nextElement();
            System.out.println(str + ": " + ht.get(str));
        }
    }
}


2)
Hello Beans java
-----------------
import java text. DateFormat;
import java. text. SimpleDateFormat;
import  java.util.*;

public class HelloBeans
{
	Private String name;

	public void getName()
	{
		System.out.println ("Your name is: "+name); 

		public public void setName()
		{
			this.name =name;
		}
		public void getCurrentDateTimeUsingDate()

		Date date = new Date(0);

		String strDateFormat= "hh:mm:ss  a";

		DateFormat dateFormat = new SimpleDateFormat(str DateFormat);

		String formattedDate= dateFormat. format(date);

		System.out.println(" Current time of the date: " +formattedDate);
	}
}
----------------
MainApp.java
----------------
import org. springframework.context.Application Context;

import org.springframework. context.ClassPathXml ApplicationContext;

public class MainApp
{
public static void main(String args[])
{
ApplicationContext context = new ClassPathXml ApplicationContext("Beans.xml"); 
Hello Beans hb = (HelloBeans)context.getBeans ("helloworld");
hb.getName();
hb.getCurrentDateTimeUsingDate();
}
}

***************************************************************************************************************
Slip 14

1)
import java.util.*;
import java.io.*;

class SETB1 {
    public static void main(String[] args) throws Exception {
        int no, element, i;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        TreeSet ts = new TreeSet();

        System.out.println("Enter the number of elements:");
        no = Integer.parseInt(br.readLine());

        for (i = 0; i < no; i++) {
            System.out.println("Enter the element: ");
            element = Integer.parseInt(br.readLine());
            ts.add(element);
        }

        System.out.println("The elements in sorted order: " + ts);

        System.out.println("Enter element to be searched: ");
        element = Integer.parseInt(br.readLine());

        if (ts.contains(element))
            System.out.println("Element is found");
        else
            System.out.println("Element is NOT found");
    }
}



2)
Hellobeans.java
--------------
package springDemo;

public class HelloBeans
{
private String name;

public void getName(){
 System.out.println("Your message is:" +name);
}

 public void setName()
{
this. name =name;
}
}
----------------
MainApp.java
----------------
import org. springframework.context.Application Context;

import org.springframework. context.ClassPathXml ApplicationContext;

public class MainApp
{
public static void main(String args[])
{
ApplicationContext context = new ClassPathXml ApplicationContext("Beans.xml"); 
 Hello Beans hb = (HelloBeans)context.getBeans ("helloworld");
}
}
----------------
Beans.xml
----------------

***************************************************************************************************************
Slip 15

1)
import java.util.*;

class HashMapDemo {
    public static void main(String args[]) {
        HashMap<Integer, String> ha = new HashMap<>();
        ha.put(10, "Java");
        ha.put(20, "Operating System");
        ha.put(30, "SoftwareTesting Tools");
        ha.put(40, "Compiler Constructor");
        ha.put(50, "Web Technologies");

        // Before Sorting
        System.out.println("Before Sorting:");
        Set<Map.Entry<Integer, String>> set = ha.entrySet();
        Iterator<Map.Entry<Integer, String>> it = set.iterator();
        while (it.hasNext()) {
            Map.Entry<Integer, String> me = it.next();
            System.out.print(me.getKey() + ": ");
            System.out.println(me.getValue());
        }

        // After Sorting (Using TreeMap)
        Map<Integer, String> map = new TreeMap<>(ha);  // Sorting by keys with TreeMap
        System.out.println("After Sorting:");
        Set<Map.Entry<Integer, String>> set1 = map.entrySet();
        Iterator<Map.Entry<Integer, String>> it2 = set1.iterator();
        while (it2.hasNext()) {
            Map.Entry<Integer, String> me2 = it2.next();
            System.out.print(me2.getKey() + ": ");
            System.out.println(me2.getValue());
        }
    }
}


2)

import javax.swing.table.*;
import java.sql.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
class ProjectDemo extends JFrame implements ActionListener       
{   
    JTextField t1,t2,t3,t4;
    JLabel l1,l2,l3,l4;
    JButton b1,b2;
    int row,column;
    ProjectDemo()
    {
        setLayout(new FlowLayout());
        setSize(500,500);
        setVisible(true);       
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         
        l1=new JLabel("Project Id");
        add(l1);
         
        t1=new JTextField(10);
        add(t1);
         
        l2=new JLabel("Project Name");
        add(l2);
         
        t2=new JTextField(10);
        add(t2);
         
        l3=new JLabel("Project Description");
        add(l3);
         
        t3=new JTextField(10);
        add(t3);

	l4=new JLabel("Project Status");
	add(l4);
	
	t4=new JTextField(10);
	add(t4);
        
        b1=new JButton("Insert");
        add(b1);
        b1.addActionListener(this);
         
        b2=new JButton("Display");
        add(b2);
        b2.addActionListener(this);
         
        try
        {
            Class.forName("org.postgresql.Driver");
        }
        catch(Exception e)
        {
          System.out.println("Error"+e.getMessage());     
        }
    }
    public void actionPerformed(ActionEvent e2)
    {
        if(e2.getSource()==b1)
        {
            try
           {
               int pid=Integer.parseInt(t1.getText());
               String pname=t2.getText();
               String pdesc=t3.getText();
               String pstat=t4.getText(); 
      Connection conn = DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","postgres"); 
                 
                PreparedStatement st=conn.prepareStatement("insert into Project values(?,?,?,?)");
                st.setInt(1, pid);
                st.setString(2,pname);
                st.setString(3,pdesc);
		        st.setString(4,pstat);
                st.executeUpdate();
                st.close();
                JOptionPane.showMessageDialog(this,"Inserted");
                     
           }catch(Exception e)
           {
               System.out.println("Error"+e.getMessage());
           }
        }  
        if(e2.getSource()==b2)
        {
            try
           {
               
               Object[] data=new Object[3];
               DefaultTableModel dtm=new DefaultTableModel();
               JTable jt=new JTable(dtm);
               ResultSet rs;
                System.out.println("hello");
               jt.setBounds(20,20,50,50);
               String[] darr={"Project ID ","Project Name","Project Description","Project Status"};
               for(int column=0;column<4;column++)        
               {
                   dtm.addColumn(darr[column]);
               }
               Connection conn = DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","postgres"); 
                Statement st=conn.createStatement();
                rs=st.executeQuery("select * from Project");
               for(row=0;rs.next();row++)        
               {
                  for(int column=0;column<4;column++)        
                  {
                      data[column]=rs.getObject(column+1);
                  }
                  dtm.addRow(data);
               }
               rs.close();
               getContentPane().add(new JScrollPane(jt));
           }catch(Exception e)
           {
                
           }
        }
    }
    public static void main(String[] args) 
    {
        new ProjectDemo();
    }
     
}

***************************************************************************************************************
Slip 16

1)
import java.util.*;
import java.io.*;

public class Phonebook {
    public static void main(String args[]) {
        try {
            // Corrected FileInputStream path
            FileInputStream fis = new FileInputStream("myfile.txt");
            Scanner sc = new Scanner(fis); // Default scanner behavior
            
            Hashtable<String, String> ht = new Hashtable<String, String>();
            String[] strarray;
            String a, str;
            
            // Reading the file line by line
            while (sc.hasNextLine()) {
                a = sc.nextLine();
                strarray = a.split("\t");  // Split explicitly by tab character
                
                // Ensure the line contains both name and phone number
                if (strarray.length < 2) {
                    System.out.println("Skipping invalid line: " + a);
                    continue;  // Skip invalid lines
                }
                
                // Trim spaces before adding to hashtable
                ht.put(strarray[0].trim(), strarray[1].trim());
                System.out.println("Hashtable values are: " + strarray[0].trim() + ": " + strarray[1].trim());
            }
            
            // Reading user input
            Scanner s = new Scanner(System.in);
            System.out.println("Enter the name as given in the phone book:");
            str = s.nextLine().trim();  // Use nextLine to capture full input
            
            // Check if name exists in hashtable
            if (ht.containsKey(str)) {
                System.out.println("Phone no is: " + ht.get(str));  // Corrected method call
            } else {
                System.out.println("Name is not matching with the phone book");
            }
            
        } catch (FileNotFoundException e) {
            System.out.println("The file was not found: " + e.getMessage());
        } catch (Exception e) {
            System.out.println(e);  // Handle other exceptions
        }
    }
}



2)
import java.sql.*;

class DatabaseMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");
        
        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");
        
        DatabaseMetaData dmd = con.getMetaData();
        System.out.println("==========DB Details==========");
        System.out.println("DB Name=" + dmd.getDatabaseProductName());
        System.out.println("DB Version=" + dmd.getDatabaseProductVersion());
        System.out.println("DB Driver Name=" + dmd.getDriverName());
        System.out.println("Driver Major Version=" + dmd.getDriverMajorVersion());
        System.out.println("Driver Minor Version=" + dmd.getDriverMinorVersion());
        System.out.println("URL of DB=" + dmd.getURL());
        System.out.println("Current UserName=" + dmd.getUserName());
        
        System.out.println("==========Tables===========");
        String t[] = {"Tables"};
        ResultSet rs = dmd.getTables(null, null, null, t);
        while (rs.next()) {
            System.out.println(rs.getString("Table Name"));
        }
        
        System.in.read();
        
        System.out.println("==========Views=========");
        String v[] = {"Views"};
        rs = dmd.getTables(null, null, null, v);
        while (rs.next()) {
            System.out.println(rs.getString("Table Views"));
        }
        
        con.close();
    }
}

***************************************************************************************************************
Slip 17

1)
import java.util.*;

class MyThread extends Thread
{
	String message="";
	int n;
	MyThread(String message,int n)
	{
		this.message = message;
		this.n = n;
	}
	public void run()
	{
		try
		{
			for(int i=0;i<n;i++)
			{
				System.out.println(message+" "+i+"Times ");
	
			}
		}catch(Exception e) {
			
		}
	}
}
public class Covid_SETA {
	public static void main(String args[])
	{
		int n= 10;
		MyThread t1 = new MyThread("Covid10",n);
		System.out.println(t1);
		t1.start();
		MyThread t2 = new MyThread("LOCKDOWN20",n+10);
		System.out.println(t2);
		t2.start();
		MyThread t3 = new MyThread("Vaccinated20",n+20);
		System.out.println(t3);
		t3.start();
	}
}



2)
import java.sql.*;
import java.io.*;
public class MobileDemo
{
    public static void main(String[] args) throws Exception
    {
    Connection con;
    ResultSet rs;
    Statement t;
    PreparedStatement ps=null;
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    Class.forName("org.postgresql.Driver");
    con=DriverManager.getConnection("jdbc:postgresql://localhost/tydb","root","root123");
    do
    {
    System.out.println("\n1.Insert\n2.Modify\n3.Delete\n4.Search\n5.View all\n6.Exit");
    System.out.println("Enter the choice");
    int ch=Integer.parseInt(br.readLine());
    switch(ch)
    {
        case 1:
            System.out.println("Enter the Modelno");
            int mno=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the Modelname");
            String mname=br.readLine();
            
            System.out.print("Enter Model Color:");
            String mcolor=br.readLine();
            
            System.out.print("Enter Sim type:");
            String mstype = br.readLine();
            
            System.out.print("Enter Network Type:");
            String mntype=br.readLine();
            
            System.out.print("Enter Battery Capacity:");
            String capacity= br.readLine();
            
            System.out.print("Enter Internal Storage:");
            int storage=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the RAM");
            int ram=Integer.parseInt(br.readLine());
            
            System.out.print("Enter Processor Type:");
            String ptype=br.readLine();
            
            ps=con.prepareStatement("insert into MobileInfo values(?,?,?,?,?,?,?,?,?)");
			ps.setInt(1, mno);
			ps.setString(2, mname);
			ps.setString(3,mcolor);
			ps.setString(4, mstype);
			ps.setString(5, mntype);
			ps.setString(6, capacity);
			ps.setInt(7, storage);
			ps.setInt(8, ram);
			ps.setString(9, ptype);
			int i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to insert");
			else
				System.out.println("Data Inserted Succesfully");
            break;
            
        case 2:
        	System.out.println("Enter to Modify record");
            System.out.println("Enter the Modelno");
             mno=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the Modelname");
             mname=br.readLine();
            
            System.out.print("Enter Model Color:");
            mcolor=br.readLine();
            
            System.out.print("Enter Sim type:");
            mstype = br.readLine();
            
            System.out.print("Enter Network Type:");
             mntype=br.readLine();
            
            System.out.print("Enter Battery Capacity:");
             capacity= br.readLine();
            
            System.out.print("Enter Internal Storage:");
             storage=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the RAM");
            ram=Integer.parseInt(br.readLine());
            
            System.out.print("Enter Processor Type:");
             ptype=br.readLine();
            
            ps=con.prepareStatement("insert into MobileInfo values(?,?,?,?,?,?,?,?,?)");
			ps.setInt(1, mno);
			ps.setString(2, mname);
			ps.setString(3,mcolor);
			ps.setString(4, mstype);
			ps.setString(5, mntype);
			ps.setString(6, capacity);
			ps.setInt(7, storage);
			ps.setInt(8, ram);
			ps.setString(9, ptype);
			 i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to insert");
			else
				System.out.println("Data Inserted Succesfully");
            break;
            
        case 3:
            System.out.println("Enter the Model Number for delete record");
            int no=Integer.parseInt(br.readLine());
            ps=con.prepareStatement("delete from MobileInfo where model_number=?");
            ps.setInt(1, no);
            i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to Delete");
			else
				System.out.println("Data deleted Succesfully");
            break;
            
            
        case 4:
            System.out.println("Enter the Model Number for search");
            no=Integer.parseInt(br.readLine());
            t=con.createStatement();
            rs=t.executeQuery("select * from MobileInfo where mno="+no);
            while(rs.next())
            {
            	 System.out.println("Model Number="+rs.getInt(1));
                 System.out.println("Model Name="+rs.getString(2));
                 System.out.println("Model Color="+rs.getString(3));
                 System.out.println("Sim Type:" +rs.getString(4));
                 System.out.println("Network Type=" +rs.getString(5));
                 System.out.println("Battery Capacity=:" +rs.getString(6));
                 System.out.println("Internal Strorage=" +rs.getInt(7));
                 System.out.println("RAm=" +rs.getInt(8));
                 System.out.println("Processor:" +rs.getString(9));
            }
            break;
        case 5:
            t=con.createStatement();
            rs=t.executeQuery("select * from MobileInfo");
            while(rs.next())
            {
                System.out.println("Model Number="+rs.getInt(1));
                System.out.println("Model Name="+rs.getString(2));
                System.out.println("Model Color="+rs.getString(3));
                System.out.println("Sim Type:" +rs.getString(4));
                System.out.println("Network Type=" +rs.getString(5));
                System.out.println("Battery Capacity=:" +rs.getString(6));
                System.out.println("Internal Strorage=" +rs.getInt(7));
                System.out.println("RAm=" +rs.getInt(8));
                System.out.println("Processor:" +rs.getString(9));
                }
            break;
        case 6:
            System.exit(0);
            break;
    }
    }while(true);
    }
}

***************************************************************************************************************
Slip 18

1)
class MyThreadDemo {
    public static void main(String args[]) {
        Thread t = Thread.currentThread();
        System.out.println("Current Thread is: " + t);

        // Changing the thread name
        t.setName("Demo Thread");
        System.out.println("After changing the name, thread is: " + t);

        try {
            for (int n = 100; n > 0; n--) {
                System.out.println(n);
                Thread.sleep(1); // Pause for 6 seconds
            }
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted");
        }
    }
}


2)
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

class InvalidBirthDateException extends Exception {
    String msg = "Invalid Date Exception\n";

    public String toString() {
        return msg;
    }
}

public class Cowin extends JFrame implements ActionListener {
    JTextField adhar, byear, phone, hosp;
    JPanel p1, p2, p3, p4;
    JButton add, update, delete, view, search;
    JRadioButton r1, r2, r3, r4, r5, r6, r7, r8;
    ButtonGroup bg, bg1, bg2;
    JComboBox<String> hos;
    String[] s = {"METRO Hospital", "City Hospital", "Pune Hospital"};

    Cowin() {
        setTitle("Cowin Registration");
        setSize(800, 600);
        setLayout(new GridLayout(8, 2, 40, 40));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JLabel adharno = new JLabel("Adhar Card Number: ");
        add(adharno);
        adhar = new JTextField(10);
        add(adhar);

        JLabel Byear = new JLabel("Birth Year: ");
        add(Byear);
        byear = new JTextField(10);
        add(byear);

        JLabel phoneNo = new JLabel("Mobile Number: ");
        add(phoneNo);
        phone = new JTextField(10);
        add(phone);

        p1 = new JPanel();
        p1.setLayout(new FlowLayout());
        JLabel Age = new JLabel("Age Group : ");
        add(Age);

        r1 = new JRadioButton("18 & above");
        r1.setActionCommand("18 & above");
        p1.add(r1);

        r2 = new JRadioButton("45 & above");
        r2.setActionCommand("45 & above");
        p1.add(r2);
        add(p1);

        JLabel hospital = new JLabel("Select Hospital: ");
        add(hospital);
        hos = new JComboBox<>(s);
        add(hos);

        p2 = new JPanel();
        p2.setLayout(new FlowLayout());
        JLabel Vaccines = new JLabel("Vaccines : : ");
        add(Vaccines);

        r3 = new JRadioButton("Covishield");
        r3.setActionCommand("Covishield");
        p2.add(r3);

        r4 = new JRadioButton("Covaxin");
        r4.setActionCommand("Covaxin");
        p2.add(r4);

        r5 = new JRadioButton("Sputnik V");
        r5.setActionCommand("SputnikV");
        p2.add(r5);
        add(p2);

        p3 = new JPanel();
        p3.setLayout(new FlowLayout());
        JLabel Time = new JLabel("Time Slot :: ");
        add(Time);

        r6 = new JRadioButton("Morning");
        r6.setActionCommand("Morning");
        p3.add(r6);

        r7 = new JRadioButton("Afternoon");
        r7.setActionCommand("Afternoon");
        p3.add(r7);

        r8 = new JRadioButton("Evening");
        r8.setActionCommand("Evening");
        p3.add(r8);
        add(p3);

        p4 = new JPanel();
        p4.setLayout(new FlowLayout());

        add = new JButton("Add");
        p4.add(add);
        update = new JButton("Update");
        p4.add(update);
        delete = new JButton("Delete");
        p4.add(delete);
        view = new JButton("View");
        p4.add(view);
        search = new JButton("Search");
        p4.add(search);
        add(p4);

        add.addActionListener(this);

        bg = new ButtonGroup();
        bg.add(r1);
        bg.add(r2);

        bg1 = new ButtonGroup();
        bg1.add(r4);
        bg1.add(r3);
        bg1.add(r5);

        bg2 = new ButtonGroup();
        bg2.add(r6);
        bg2.add(r7);
        bg2.add(r8);

        setVisible(true);
    }

    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == add) {
            String adharno = adhar.getText();
            int year = Integer.parseInt(byear.getText());
            String phNo = phone.getText();
            String hospital = (String) hos.getSelectedItem();
            String age = bg.getSelection().getActionCommand();
            String vaccine = bg1.getSelection().getActionCommand();
            String timestamp = bg2.getSelection().getActionCommand();

            try {
                if (year == 0000) {
                    throw new InvalidBirthDateException();
                } else {
                    Connection conn = null;
                    PreparedStatement pstmt = null;
                    try {
                        Class.forName("org.postgresql.Driver");
                        conn = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
                        pstmt = conn.prepareStatement("insert into cowin values(?,?,?,?,?,?,?)");

                        pstmt.setString(1, adharno);
                        pstmt.setInt(2, year);
                        pstmt.setString(3, phNo);
                        pstmt.setString(4, hospital);
                        pstmt.setString(5, age);
                        pstmt.setString(6, vaccine);
                        pstmt.setString(7, timestamp);

                        int result = pstmt.executeUpdate();
                        if (result == 1) {
                            JOptionPane.showMessageDialog(null, "Successfully Inserted", hospital, JOptionPane.INFORMATION_MESSAGE);
                        }

                        pstmt.close();
                        conn.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e, "ERROR OCCURRED", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (InvalidBirthDateException e) {
                JOptionPane.showMessageDialog(null, e, "ERROR OCCURRED", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public static void main(String[] args) {
        new Cowin();
    }
}

***************************************************************************************************************
Slip 19

1)

public class Communication {
	public static void main(String args[])
	{
		Producer p = new Producer();
		Consumer c = new Consumer(p);
		c.start();
		p.start();
	}
}

class Producer extends Thread
{
	StringBuffer sb;
	
	Producer()
	{
		sb = new StringBuffer();
	}
	public void run()
	{
		synchronized(sb)
		{
			for(int i=0;i<=10;i++)
			{
				try
				{
					sb.append(i+":");
					Thread.sleep(100);
					System.out.println("Appending:"+i);
				}
				catch(InterruptedException e)
				{
						System.out.println(e);
				}
			}
			sb.notify();
		}
	}
}

class Consumer extends Thread
{
	Producer prod;
	Consumer(Producer prod)
	{
		this.prod = prod;
	}
	public void run()
	{
		synchronized(prod.sb)
		{
			try
			{
				prod.sb.wait();
			}
			catch(InterruptedException e)
			{
				System.out.println(e);
			}
			System.out.println(prod.sb);
		}
	}
}



2)
import java.sql.*;

class ResultSetMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");
        
        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");
        
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery("Select * from Student");
        ResultSetMetaData rsmd = rs.getMetaData();
        
        int n = rsmd.getColumnCount();
        System.out.println("No. of columns=" + n);
        
        for (int i = 1; i <= n; i++) {
            System.out.println("Column Number: " + i);
            System.out.println("===============");
            System.out.println("Column name=" + rsmd.getColumnName(i));
            System.out.println("Column Type=" + rsmd.getColumnTypeName(i));
            System.out.println("Column Width=" + rsmd.getColumnDisplaySize(i));
            System.out.println("Column Precision=" + rsmd.getPrecision(i));
            System.out.println("Is Currency=" + rsmd.isCurrency(i));
            System.out.println("Is ReadOnly=" + rsmd.isReadOnly(i));
            System.out.println("Is Writable=" + rsmd.isWritable(i));
            System.out.println("Is Searchable=" + rsmd.isSearchable(i));
            System.out.println("Is Signed=" + rsmd.isSigned(i));
        }
        
        con.close();
    }
}

***************************************************************************************************************
Slip 20

1)
import java.util.*;

class thread implements Runnable
{
	Thread t;
	int i,no=0,sum;
	int a[] = new int[1000];
	
	thread(String s,int n)
	{
		Random rs = new Random();
		t = new Thread(this,s);
		
		no = n;
		int j=0;
		
		for(i=1;i<=1000;i++)
		{
			a[j] = rs.nextInt(100)%100;
			j++;
		}
		t.start();
	}
	
	public void run()
	{
		for(i=0;i<100;i++)
		{
			sum = sum+a[no];
			no++;
		}
		System.out.println("Sum="+sum);
		System.out.println("Avg="+sum/100);
	}
}

public class sum_array
{
	public static void main(String args[]) throws InterruptedException
	{
		thread t1=new thread("g",1);
		t1.t.join();
		thread t2=new thread("r",100);
		t2.t.join();
		thread t3=new thread("s",200);
		t3.t.join();
		thread t4=new thread("t",300);
		t4.t.join();
		thread t5=new thread("p",400);
		t5.t.join();
		thread t6=new thread("p",500);
		t6.t.join();
		thread t7=new thread("p",600);
		t7.t.join();
		thread t8=new thread("p",700);
		t8.t.join();
		thread t9=new thread("p",800);
		t9.t.join();
		thread t10=new thread("p",900);
		t10.t.join();
	}
}



2)
import java.sql.*;
import java.io.*;
public class MobileDemo
{
    public static void main(String[] args) throws Exception
    {
    Connection con;
    ResultSet rs;
    Statement t;
    PreparedStatement ps=null;
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    Class.forName("org.postgresql.Driver");
    con=DriverManager.getConnection("jdbc:postgresql://localhost/tydb","root","root123");
    do
    {
    System.out.println("\n1.Insert\n2.Modify\n3.Delete\n4.Search\n5.View all\n6.Exit");
    System.out.println("Enter the choice");
    int ch=Integer.parseInt(br.readLine());
    switch(ch)
    {
        case 1:
            System.out.println("Enter the Modelno");
            int mno=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the Modelname");
            String mname=br.readLine();
            
            System.out.print("Enter Model Color:");
            String mcolor=br.readLine();
            
            System.out.print("Enter Sim type:");
            String mstype = br.readLine();
            
            System.out.print("Enter Network Type:");
            String mntype=br.readLine();
            
            System.out.print("Enter Battery Capacity:");
            String capacity= br.readLine();
            
            System.out.print("Enter Internal Storage:");
            int storage=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the RAM");
            int ram=Integer.parseInt(br.readLine());
            
            System.out.print("Enter Processor Type:");
            String ptype=br.readLine();
            
            ps=con.prepareStatement("insert into MobileInfo values(?,?,?,?,?,?,?,?,?)");
			ps.setInt(1, mno);
			ps.setString(2, mname);
			ps.setString(3,mcolor);
			ps.setString(4, mstype);
			ps.setString(5, mntype);
			ps.setString(6, capacity);
			ps.setInt(7, storage);
			ps.setInt(8, ram);
			ps.setString(9, ptype);
			int i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to insert");
			else
				System.out.println("Data Inserted Succesfully");
            break;
            
        case 2:
        	System.out.println("Enter to Modify record");
            System.out.println("Enter the Modelno");
             mno=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the Modelname");
             mname=br.readLine();
            
            System.out.print("Enter Model Color:");
            mcolor=br.readLine();
            
            System.out.print("Enter Sim type:");
            mstype = br.readLine();
            
            System.out.print("Enter Network Type:");
             mntype=br.readLine();
            
            System.out.print("Enter Battery Capacity:");
             capacity= br.readLine();
            
            System.out.print("Enter Internal Storage:");
             storage=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the RAM");
            ram=Integer.parseInt(br.readLine());
            
            System.out.print("Enter Processor Type:");
             ptype=br.readLine();
            
            ps=con.prepareStatement("insert into MobileInfo values(?,?,?,?,?,?,?,?,?)");
			ps.setInt(1, mno);
			ps.setString(2, mname);
			ps.setString(3,mcolor);
			ps.setString(4, mstype);
			ps.setString(5, mntype);
			ps.setString(6, capacity);
			ps.setInt(7, storage);
			ps.setInt(8, ram);
			ps.setString(9, ptype);
			 i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to insert");
			else
				System.out.println("Data Inserted Succesfully");
            break;
            
        case 3:
            System.out.println("Enter the Model Number for delete record");
            int no=Integer.parseInt(br.readLine());
            ps=con.prepareStatement("delete from MobileInfo where model_number=?");
            ps.setInt(1, no);
            i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to Delete");
			else
				System.out.println("Data deleted Succesfully");
            break;
            
            
        case 4:
            System.out.println("Enter the Model Number for search");
            no=Integer.parseInt(br.readLine());
            t=con.createStatement();
            rs=t.executeQuery("select * from MobileInfo where mno="+no);
            while(rs.next())
            {
            	 System.out.println("Model Number="+rs.getInt(1));
                 System.out.println("Model Name="+rs.getString(2));
                 System.out.println("Model Color="+rs.getString(3));
                 System.out.println("Sim Type:" +rs.getString(4));
                 System.out.println("Network Type=" +rs.getString(5));
                 System.out.println("Battery Capacity=:" +rs.getString(6));
                 System.out.println("Internal Strorage=" +rs.getInt(7));
                 System.out.println("RAm=" +rs.getInt(8));
                 System.out.println("Processor:" +rs.getString(9));
            }
            break;
        case 5:
            t=con.createStatement();
            rs=t.executeQuery("select * from MobileInfo");
            while(rs.next())
            {
                System.out.println("Model Number="+rs.getInt(1));
                System.out.println("Model Name="+rs.getString(2));
                System.out.println("Model Color="+rs.getString(3));
                System.out.println("Sim Type:" +rs.getString(4));
                System.out.println("Network Type=" +rs.getString(5));
                System.out.println("Battery Capacity=:" +rs.getString(6));
                System.out.println("Internal Strorage=" +rs.getInt(7));
                System.out.println("RAm=" +rs.getInt(8));
                System.out.println("Processor:" +rs.getString(9));
                }
            break;
        case 6:
            System.exit(0);
            break;
    }
    }while(true);
    }
}

***************************************************************************************************************
Slip 21

1)

import java.io.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class SimpleSearchEngine {

    // Define a class that implements Runnable to handle search in each file
    static class FileSearchTask implements Runnable {
        private String filename;
        private String searchString;

        public FileSearchTask(String filename, String searchString) {
            this.filename = filename;
            this.searchString = searchString;
        }

        @Override
        public void run() {
            searchInFile(filename, searchString);
        }

        private void searchInFile(String filename, String searchString) {
            try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
                String line;
                int lineNumber = 1;
                boolean found = false;
                
                while ((line = reader.readLine()) != null) {
                    if (line.contains(searchString)) {
                        System.out.println("Found in " + filename + " on line " + lineNumber);
                        found = true;
                    }
                    lineNumber++;
                }
                
                if (!found) {
                    System.out.println("String not found in " + filename);
                }
            } catch (IOException e) {
                System.out.println("Error reading file " + filename + ": " + e.getMessage());
            }
        }
    }

    public static void main(String[] args) {
        // Prompt user for the search string
        System.out.print("Enter the string to search for: ");
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        try {
            String searchString = br.readLine();

            // Get a list of all text files in the current directory
            File directory = new File(".");
            File[] files = directory.listFiles((dir, name) -> name.endsWith(".txt"));

            // Create a thread pool for managing threads
            ExecutorService executorService = Executors.newCachedThreadPool();

            if (files != null && files.length > 0) {
                for (File file : files) {
                    // For each text file, submit a task to search in the file
                    executorService.submit(new FileSearchTask(file.getName(), searchString));
                }
            } else {
                System.out.println("No text files found in the current directory.");
            }

            // Shutdown the executor service to stop accepting new tasks and wait for existing tasks to complete
            executorService.shutdown();

        } catch (IOException e) {
            System.out.println("Error reading input: " + e.getMessage());
        }
    }
}






2)
import java.sql.*;

class ResultSetMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");
        
        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");
        
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery("Select * from Student");
        ResultSetMetaData rsmd = rs.getMetaData();
        
        int n = rsmd.getColumnCount();
        System.out.println("No. of columns=" + n);
        
        for (int i = 1; i <= n; i++) {
            System.out.println("Column Number: " + i);
            System.out.println("===============");
            System.out.println("Column name=" + rsmd.getColumnName(i));
            System.out.println("Column Type=" + rsmd.getColumnTypeName(i));
            System.out.println("Column Width=" + rsmd.getColumnDisplaySize(i));
            System.out.println("Column Precision=" + rsmd.getPrecision(i));
            System.out.println("Is Currency=" + rsmd.isCurrency(i));
            System.out.println("Is ReadOnly=" + rsmd.isReadOnly(i));
            System.out.println("Is Writable=" + rsmd.isWritable(i));
            System.out.println("Is Searchable=" + rsmd.isSearchable(i));
            System.out.println("Is Signed=" + rsmd.isSigned(i));
        }
        
        con.close();
    }
}

***************************************************************************************************************
Slip 22

1)
import java.util.*;

class Randomno extends Thread
{
	public void run()
	{
		Random rs = new Random();
		
		for(int i=0;i<10;i++)
		{
			int randint = rs.nextInt(100);
			System.out.println("Random No Generated:"+randint);
			if((randint%2)==0)
			{
				System.out.println("Generated no is Even");
				SquareThread sthread = new SquareThread(randint);
				sthread.start();
			}
			else {

				System.out.println("Generated no is Odd");
				CubeThread rthread = new CubeThread(randint);
				rthread.start();
			}
			try {
				Thread.sleep(1000);
			}
			catch(InterruptedException e)
			{
				
			}
		}
		
	}
	
}

class SquareThread extends Thread
{
	int randint;
	
	SquareThread(int randint)
	{
		this.randint = randint;
	}
	
	public void run()
	{
		System.out.println("Square of Number:"+randint*randint);
	}
}

class CubeThread extends Thread
{
	int randint;
	
	CubeThread(int randint)
	{
		this.randint = randint;
	}
	
	public void run()
	{
		System.out.println("Cube of Number:"+randint*randint*randint);
	}
}

public class MultiThread {
	public static void main(String args[])
	{
		Randomno r = new Randomno();
		r.start();
	}	
}



2)
import java.sql.*;

class DatabaseMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");
        
        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");
        
        DatabaseMetaData dmd = con.getMetaData();
        System.out.println("==========DB Details==========");
        System.out.println("DB Name=" + dmd.getDatabaseProductName());
        System.out.println("DB Version=" + dmd.getDatabaseProductVersion());
        System.out.println("DB Driver Name=" + dmd.getDriverName());
        System.out.println("Driver Major Version=" + dmd.getDriverMajorVersion());
        System.out.println("Driver Minor Version=" + dmd.getDriverMinorVersion());
        System.out.println("URL of DB=" + dmd.getURL());
        System.out.println("Current UserName=" + dmd.getUserName());
        
        System.out.println("==========Tables===========");
        String t[] = {"Tables"};
        ResultSet rs = dmd.getTables(null, null, null, t);
        while (rs.next()) {
            System.out.println(rs.getString("Table Name"));
        }
        
        System.in.read();
        
        System.out.println("==========Views=========");
        String v[] = {"Views"};
        rs = dmd.getTables(null, null, null, v);
        while (rs.next()) {
            System.out.println(rs.getString("Table Views"));
        }
        
        con.close();
    }
}

***************************************************************************************************************
Slip 23

1)
import java.util.*;
import java.io.*;

public class ArrayListDemo 
{
    public static void main(String args[]) throws Exception 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        ArrayList al = new ArrayList();

        System.out.println("\nHow many City?");
        int n = Integer.parseInt(br.readLine());
        System.out.println("\n Enter City names:");

        for (int i =0  ; i <= n; i++) 
        {
            al.add(br.readLine());
        }
        System.out.println("Entered cities are :" + al);
        al.removeAll(al);
        System.out.println("All cities are removed from the ArrayList:" + al);
    }
}


2)
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

class InvalidBirthDateException extends Exception {
    String msg = "Invalid Date Exception\n";

    public String toString() {
        return msg;
    }
}

public class Cowin extends JFrame implements ActionListener {
    JTextField adhar, byear, phone, hosp;
    JPanel p1, p2, p3, p4;
    JButton add, update, delete, view, search;
    JRadioButton r1, r2, r3, r4, r5, r6, r7, r8;
    ButtonGroup bg, bg1, bg2;
    JComboBox<String> hos;
    String[] s = {"METRO Hospital", "City Hospital", "Pune Hospital"};

    Cowin() {
        setTitle("Cowin Registration");
        setSize(800, 600);
        setLayout(new GridLayout(8, 2, 40, 40));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JLabel adharno = new JLabel("Adhar Card Number: ");
        add(adharno);
        adhar = new JTextField(10);
        add(adhar);

        JLabel Byear = new JLabel("Birth Year: ");
        add(Byear);
        byear = new JTextField(10);
        add(byear);

        JLabel phoneNo = new JLabel("Mobile Number: ");
        add(phoneNo);
        phone = new JTextField(10);
        add(phone);

        p1 = new JPanel();
        p1.setLayout(new FlowLayout());
        JLabel Age = new JLabel("Age Group : ");
        add(Age);

        r1 = new JRadioButton("18 & above");
        r1.setActionCommand("18 & above");
        p1.add(r1);

        r2 = new JRadioButton("45 & above");
        r2.setActionCommand("45 & above");
        p1.add(r2);
        add(p1);

        JLabel hospital = new JLabel("Select Hospital: ");
        add(hospital);
        hos = new JComboBox<>(s);
        add(hos);

        p2 = new JPanel();
        p2.setLayout(new FlowLayout());
        JLabel Vaccines = new JLabel("Vaccines : : ");
        add(Vaccines);

        r3 = new JRadioButton("Covishield");
        r3.setActionCommand("Covishield");
        p2.add(r3);

        r4 = new JRadioButton("Covaxin");
        r4.setActionCommand("Covaxin");
        p2.add(r4);

        r5 = new JRadioButton("Sputnik V");
        r5.setActionCommand("SputnikV");
        p2.add(r5);
        add(p2);

        p3 = new JPanel();
        p3.setLayout(new FlowLayout());
        JLabel Time = new JLabel("Time Slot :: ");
        add(Time);

        r6 = new JRadioButton("Morning");
        r6.setActionCommand("Morning");
        p3.add(r6);

        r7 = new JRadioButton("Afternoon");
        r7.setActionCommand("Afternoon");
        p3.add(r7);

        r8 = new JRadioButton("Evening");
        r8.setActionCommand("Evening");
        p3.add(r8);
        add(p3);

        p4 = new JPanel();
        p4.setLayout(new FlowLayout());

        add = new JButton("Add");
        p4.add(add);
        update = new JButton("Update");
        p4.add(update);
        delete = new JButton("Delete");
        p4.add(delete);
        view = new JButton("View");
        p4.add(view);
        search = new JButton("Search");
        p4.add(search);
        add(p4);

        add.addActionListener(this);

        bg = new ButtonGroup();
        bg.add(r1);
        bg.add(r2);

        bg1 = new ButtonGroup();
        bg1.add(r4);
        bg1.add(r3);
        bg1.add(r5);

        bg2 = new ButtonGroup();
        bg2.add(r6);
        bg2.add(r7);
        bg2.add(r8);

        setVisible(true);
    }

    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == add) {
            String adharno = adhar.getText();
            int year = Integer.parseInt(byear.getText());
            String phNo = phone.getText();
            String hospital = (String) hos.getSelectedItem();
            String age = bg.getSelection().getActionCommand();
            String vaccine = bg1.getSelection().getActionCommand();
            String timestamp = bg2.getSelection().getActionCommand();

            try {
                if (year == 0000) {
                    throw new InvalidBirthDateException();
                } else {
                    Connection conn = null;
                    PreparedStatement pstmt = null;
                    try {
                        Class.forName("org.postgresql.Driver");
                        conn = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
                        pstmt = conn.prepareStatement("insert into cowin values(?,?,?,?,?,?,?)");

                        pstmt.setString(1, adharno);
                        pstmt.setInt(2, year);
                        pstmt.setString(3, phNo);
                        pstmt.setString(4, hospital);
                        pstmt.setString(5, age);
                        pstmt.setString(6, vaccine);
                        pstmt.setString(7, timestamp);

                        int result = pstmt.executeUpdate();
                        if (result == 1) {
                            JOptionPane.showMessageDialog(null, "Successfully Inserted", hospital, JOptionPane.INFORMATION_MESSAGE);
                        }

                        pstmt.close();
                        conn.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e, "ERROR OCCURRED", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (InvalidBirthDateException e) {
                JOptionPane.showMessageDialog(null, e, "ERROR OCCURRED", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public static void main(String[] args) {
        new Cowin();
    }
}


***************************************************************************************************************
Slip 24

1)
import java.util.*;
import java.io.*;

public class LinkedListDemo 
{
    public static void main(String args[]) throws Exception
    {
        int n;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        LinkedList li = new LinkedList();

        System.out.println("\nEnter number of your friends:");
        n = Integer.parseInt(br.readLine());

        System.out.println("\nEnter your friends' names:");
        for (int i = 1; i <= n; i++) 
        {
            li.add(br.readLine());
        }

        System.out.println("\nLinked List content is: " + li);
    }
}



2)
import java.sql.*;
import java.io.*;
public class MobileDemo
{
    public static void main(String[] args) throws Exception
    {
    Connection con;
    ResultSet rs;
    Statement t;
    PreparedStatement ps=null;
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    Class.forName("org.postgresql.Driver");
    con=DriverManager.getConnection("jdbc:postgresql://localhost/tydb","root","root123");
    do
    {
    System.out.println("\n1.Insert\n2.Modify\n3.Delete\n4.Search\n5.View all\n6.Exit");
    System.out.println("Enter the choice");
    int ch=Integer.parseInt(br.readLine());
    switch(ch)
    {
        case 1:
            System.out.println("Enter the Modelno");
            int mno=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the Modelname");
            String mname=br.readLine();
            
            System.out.print("Enter Model Color:");
            String mcolor=br.readLine();
            
            System.out.print("Enter Sim type:");
            String mstype = br.readLine();
            
            System.out.print("Enter Network Type:");
            String mntype=br.readLine();
            
            System.out.print("Enter Battery Capacity:");
            String capacity= br.readLine();
            
            System.out.print("Enter Internal Storage:");
            int storage=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the RAM");
            int ram=Integer.parseInt(br.readLine());
            
            System.out.print("Enter Processor Type:");
            String ptype=br.readLine();
            
            ps=con.prepareStatement("insert into MobileInfo values(?,?,?,?,?,?,?,?,?)");
			ps.setInt(1, mno);
			ps.setString(2, mname);
			ps.setString(3,mcolor);
			ps.setString(4, mstype);
			ps.setString(5, mntype);
			ps.setString(6, capacity);
			ps.setInt(7, storage);
			ps.setInt(8, ram);
			ps.setString(9, ptype);
			int i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to insert");
			else
				System.out.println("Data Inserted Succesfully");
            break;
            
        case 2:
        	System.out.println("Enter to Modify record");
            System.out.println("Enter the Modelno");
             mno=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the Modelname");
             mname=br.readLine();
            
            System.out.print("Enter Model Color:");
            mcolor=br.readLine();
            
            System.out.print("Enter Sim type:");
            mstype = br.readLine();
            
            System.out.print("Enter Network Type:");
             mntype=br.readLine();
            
            System.out.print("Enter Battery Capacity:");
             capacity= br.readLine();
            
            System.out.print("Enter Internal Storage:");
             storage=Integer.parseInt(br.readLine());
            
            System.out.println("Enter the RAM");
            ram=Integer.parseInt(br.readLine());
            
            System.out.print("Enter Processor Type:");
             ptype=br.readLine();
            
            ps=con.prepareStatement("insert into MobileInfo values(?,?,?,?,?,?,?,?,?)");
			ps.setInt(1, mno);
			ps.setString(2, mname);
			ps.setString(3,mcolor);
			ps.setString(4, mstype);
			ps.setString(5, mntype);
			ps.setString(6, capacity);
			ps.setInt(7, storage);
			ps.setInt(8, ram);
			ps.setString(9, ptype);
			 i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to insert");
			else
				System.out.println("Data Inserted Succesfully");
            break;
            
        case 3:
            System.out.println("Enter the Model Number for delete record");
            int no=Integer.parseInt(br.readLine());
            ps=con.prepareStatement("delete from MobileInfo where model_number=?");
            ps.setInt(1, no);
            i=ps.executeUpdate();
			if(i==0)
				System.out.println("Unable to Delete");
			else
				System.out.println("Data deleted Succesfully");
            break;
            
            
        case 4:
            System.out.println("Enter the Model Number for search");
            no=Integer.parseInt(br.readLine());
            t=con.createStatement();
            rs=t.executeQuery("select * from MobileInfo where mno="+no);
            while(rs.next())
            {
            	 System.out.println("Model Number="+rs.getInt(1));
                 System.out.println("Model Name="+rs.getString(2));
                 System.out.println("Model Color="+rs.getString(3));
                 System.out.println("Sim Type:" +rs.getString(4));
                 System.out.println("Network Type=" +rs.getString(5));
                 System.out.println("Battery Capacity=:" +rs.getString(6));
                 System.out.println("Internal Strorage=" +rs.getInt(7));
                 System.out.println("RAm=" +rs.getInt(8));
                 System.out.println("Processor:" +rs.getString(9));
            }
            break;
        case 5:
            t=con.createStatement();
            rs=t.executeQuery("select * from MobileInfo");
            while(rs.next())
            {
                System.out.println("Model Number="+rs.getInt(1));
                System.out.println("Model Name="+rs.getString(2));
                System.out.println("Model Color="+rs.getString(3));
                System.out.println("Sim Type:" +rs.getString(4));
                System.out.println("Network Type=" +rs.getString(5));
                System.out.println("Battery Capacity=:" +rs.getString(6));
                System.out.println("Internal Strorage=" +rs.getInt(7));
                System.out.println("RAm=" +rs.getInt(8));
                System.out.println("Processor:" +rs.getString(9));
                }
            break;
        case 6:
            System.exit(0);
            break;
    }
    }while(true);
    }
}

***************************************************************************************************************
Slip 25

1)
import java.util.*;
import java.io.*;

class HashTableDemo {
    public static void main(String args[]) {
        Hashtable ht = new Hashtable();
        Enumeration names;
        String str;

        ht.put("Amar", new Long(2222222222L));
        ht.put("Anil", new Long(3333333333L));
        ht.put("Soham", new Long(8888888888L));
        ht.put("Kiran", new Long(9999999999L));
        ht.put("Williams", new Long(4444444444L));

        names = ht.keys();
        while (names.hasMoreElements()) {
            str = (String) names.nextElement();
            System.out.println(str + ": " + ht.get(str));
        }
    }
}



2)
import javax.swing.table.*;
import java.sql.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
class ProjectDemo extends JFrame implements ActionListener       
{   
    JTextField t1,t2,t3,t4;
    JLabel l1,l2,l3,l4;
    JButton b1,b2;
    int row,column;
    ProjectDemo()
    {
        setLayout(new FlowLayout());
        setSize(500,500);
        setVisible(true);       
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         
        l1=new JLabel("Project Id");
        add(l1);
         
        t1=new JTextField(10);
        add(t1);
         
        l2=new JLabel("Project Name");
        add(l2);
         
        t2=new JTextField(10);
        add(t2);
         
        l3=new JLabel("Project Description");
        add(l3);
         
        t3=new JTextField(10);
        add(t3);

	l4=new JLabel("Project Status");
	add(l4);
	
	t4=new JTextField(10);
	add(t4);
        
        b1=new JButton("Insert");
        add(b1);
        b1.addActionListener(this);
         
        b2=new JButton("Display");
        add(b2);
        b2.addActionListener(this);
         
        try
        {
            Class.forName("org.postgresql.Driver");
        }
        catch(Exception e)
        {
          System.out.println("Error"+e.getMessage());     
        }
    }
    public void actionPerformed(ActionEvent e2)
    {
        if(e2.getSource()==b1)
        {
            try
           {
               int pid=Integer.parseInt(t1.getText());
               String pname=t2.getText();
               String pdesc=t3.getText();
               String pstat=t4.getText(); 
      Connection conn = DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","postgres"); 
                 
                PreparedStatement st=conn.prepareStatement("insert into Project values(?,?,?,?)");
                st.setInt(1, pid);
                st.setString(2,pname);
                st.setString(3,pdesc);
		        st.setString(4,pstat);
                st.executeUpdate();
                st.close();
                JOptionPane.showMessageDialog(this,"Inserted");
                     
           }catch(Exception e)
           {
               System.out.println("Error"+e.getMessage());
           }
        }  
        if(e2.getSource()==b2)
        {
            try
           {
               
               Object[] data=new Object[3];
               DefaultTableModel dtm=new DefaultTableModel();
               JTable jt=new JTable(dtm);
               ResultSet rs;
                System.out.println("hello");
               jt.setBounds(20,20,50,50);
               String[] darr={"Project ID ","Project Name","Project Description","Project Status"};
               for(int column=0;column<4;column++)        
               {
                   dtm.addColumn(darr[column]);
               }
               Connection conn = DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","postgres"); 
                Statement st=conn.createStatement();
                rs=st.executeQuery("select * from Project");
               for(row=0;rs.next();row++)        
               {
                  for(int column=0;column<4;column++)        
                  {
                      data[column]=rs.getObject(column+1);
                  }
                  dtm.addRow(data);
               }
               rs.close();
               getContentPane().add(new JScrollPane(jt));
           }catch(Exception e)
           {
                
           }
        }
    }
    public static void main(String[] args) 
    {
        new ProjectDemo();
    }
     
}

***************************************************************************************************************
Slip 26

1)
import java.util.*;
import java.io.*;

class SETB1 {
    public static void main(String[] args) throws Exception {
        int no, element, i;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        TreeSet ts = new TreeSet();

        System.out.println("Enter the number of elements:");
        no = Integer.parseInt(br.readLine());

        for (i = 0; i < no; i++) {
            System.out.println("Enter the element: ");
            element = Integer.parseInt(br.readLine());
            ts.add(element);
        }

        System.out.println("The elements in sorted order: " + ts);

        System.out.println("Enter element to be searched: ");
        element = Integer.parseInt(br.readLine());

        if (ts.contains(element))
            System.out.println("Element is found");
        else
            System.out.println("Element is NOT found");
    }
}



2)
import java.sql.*;

class DatabaseMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");
        
        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");
        
        DatabaseMetaData dmd = con.getMetaData();
        System.out.println("==========DB Details==========");
        System.out.println("DB Name=" + dmd.getDatabaseProductName());
        System.out.println("DB Version=" + dmd.getDatabaseProductVersion());
        System.out.println("DB Driver Name=" + dmd.getDriverName());
        System.out.println("Driver Major Version=" + dmd.getDriverMajorVersion());
        System.out.println("Driver Minor Version=" + dmd.getDriverMinorVersion());
        System.out.println("URL of DB=" + dmd.getURL());
        System.out.println("Current UserName=" + dmd.getUserName());
        
        System.out.println("==========Tables===========");
        String t[] = {"Tables"};
        ResultSet rs = dmd.getTables(null, null, null, t);
        while (rs.next()) {
            System.out.println(rs.getString("Table Name"));
        }
        
        System.in.read();
        
        System.out.println("==========Views=========");
        String v[] = {"Views"};
        rs = dmd.getTables(null, null, null, v);
        while (rs.next()) {
            System.out.println(rs.getString("Table Views"));
        }
        
        con.close();
    }
}

***************************************************************************************************************
Slip 27

1)
import java.util.*;

class HashMapDemo {
    public static void main(String args[]) {
        HashMap<Integer, String> ha = new HashMap<>();
        ha.put(10, "Java");
        ha.put(20, "Operating System");
        ha.put(30, "SoftwareTesting Tools");
        ha.put(40, "Compiler Constructor");
        ha.put(50, "Web Technologies");

        // Before Sorting
        System.out.println("Before Sorting:");
        Set<Map.Entry<Integer, String>> set = ha.entrySet();
        Iterator<Map.Entry<Integer, String>> it = set.iterator();
        while (it.hasNext()) {
            Map.Entry<Integer, String> me = it.next();
            System.out.print(me.getKey() + ": ");
            System.out.println(me.getValue());
        }

        // After Sorting (Using TreeMap)
        Map<Integer, String> map = new TreeMap<>(ha);  // Sorting by keys with TreeMap
        System.out.println("After Sorting:");
        Set<Map.Entry<Integer, String>> set1 = map.entrySet();
        Iterator<Map.Entry<Integer, String>> it2 = set1.iterator();
        while (it2.hasNext()) {
            Map.Entry<Integer, String> me2 = it2.next();
            System.out.print(me2.getKey() + ": ");
            System.out.println(me2.getValue());
        }
    }
}


2)
import java.sql.*;

class ResultSetMetaDataDemo {
    public static void main(String args[]) throws Exception {
        Class.forName("org.postgresql.Driver");
        System.out.println("Driver Loaded");
        
        Connection con = DriverManager.getConnection("jdbc:postgresql:tybcs", "postgres", "postgres");
        System.out.println("Connection Established");
        
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery("Select * from Student");
        ResultSetMetaData rsmd = rs.getMetaData();
        
        int n = rsmd.getColumnCount();
        System.out.println("No. of columns=" + n);
        
        for (int i = 1; i <= n; i++) {
            System.out.println("Column Number: " + i);
            System.out.println("===============");
            System.out.println("Column name=" + rsmd.getColumnName(i));
            System.out.println("Column Type=" + rsmd.getColumnTypeName(i));
            System.out.println("Column Width=" + rsmd.getColumnDisplaySize(i));
            System.out.println("Column Precision=" + rsmd.getPrecision(i));
            System.out.println("Is Currency=" + rsmd.isCurrency(i));
            System.out.println("Is ReadOnly=" + rsmd.isReadOnly(i));
            System.out.println("Is Writable=" + rsmd.isWritable(i));
            System.out.println("Is Searchable=" + rsmd.isSearchable(i));
            System.out.println("Is Signed=" + rsmd.isSigned(i));
        }
        
        con.close();
    }
}

***************************************************************************************************************
Slip 28

1)
import java.util.*;
import java.io.*;

public class Phonebook {
    public static void main(String args[]) {
        try {
            // Corrected FileInputStream path
            FileInputStream fis = new FileInputStream("myfile.txt");
            Scanner sc = new Scanner(fis); // Default scanner behavior
            
            Hashtable<String, String> ht = new Hashtable<String, String>();
            String[] strarray;
            String a, str;
            
            // Reading the file line by line
            while (sc.hasNextLine()) {
                a = sc.nextLine();
                strarray = a.split("\t");  // Split explicitly by tab character
                
                // Ensure the line contains both name and phone number
                if (strarray.length < 2) {
                    System.out.println("Skipping invalid line: " + a);
                    continue;  // Skip invalid lines
                }
                
                // Trim spaces before adding to hashtable
                ht.put(strarray[0].trim(), strarray[1].trim());
                System.out.println("Hashtable values are: " + strarray[0].trim() + ": " + strarray[1].trim());
            }
            
            // Reading user input
            Scanner s = new Scanner(System.in);
            System.out.println("Enter the name as given in the phone book:");
            str = s.nextLine().trim();  // Use nextLine to capture full input
            
            // Check if name exists in hashtable
            if (ht.containsKey(str)) {
                System.out.println("Phone no is: " + ht.get(str));  // Corrected method call
            } else {
                System.out.println("Name is not matching with the phone book");
            }
            
        } catch (FileNotFoundException e) {
            System.out.println("The file was not found: " + e.getMessage());
        } catch (Exception e) {
            System.out.println(e);  // Handle other exceptions
        }
    }
}


2)
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.ResultSet"%>
<%@page import="java.sql.Statement"%>
<%@page import="java.sql.Connection"%>

<%
String id = request.getParameter("userId");
String driverName = "org.postgresql.Driver";
String connectionUrl = "jdbc:postgresql:";
String dbName = "tybcs";
String userId = "postgres";
String password = "Pass@word";

try {
Class.forName(driverName);
} catch (ClassNotFoundException e) {
e.printStackTrace();
}

Connection connection = null;
Statement statement = null;
ResultSet resultSet = null;
%>
<h2 align="center"><font><strong>Retrieve data from database in jsp</strong></font></h2>
<table align="center" cellpadding="5" cellspacing="5" border="1">
<tr>

</tr>
<tr bgcolor="blue">
<td><b>Patient No</b></td>
<td><b>Patient Name</b></td>
<td><b>Patient Address</b></td>
<td><b>Patient Age</b></td>
<td><b>Patient Diseases</b></td>
</tr>
<%
try{ 
connection = DriverManager.getConnection(connectionUrl+dbName, userId, password);
statement=connection.createStatement();
String sql ="SELECT * FROM Patient";

resultSet = statement.executeQuery(sql);
while(resultSet.next()){
	
%>
<tr bgcolor="#DEB887">

<td><%=resultSet.getInt("pid") %></td>
<td><%=resultSet.getString("pname") %></td>
<td><%=resultSet.getString("padd") %></td>
<td><%=resultSet.getInt("page") %></td>
<td><%=resultSet.getString("pdis") %></td>

</tr>

<% 
}

} catch (Exception e) {
e.printStackTrace();
}
%></table>
</body>
</html>

***************************************************************************************************************
Slip 29

1)
class MyThreadDemo {
    public static void main(String args[]) {
        Thread t = Thread.currentThread();
        System.out.println("Current Thread is: " + t);

        // Changing the thread name
        t.setName("Demo Thread");
        System.out.println("After changing the name, thread is: " + t);

        try {
            for (int n = 100; n > 0; n--) {
                System.out.println(n);
                Thread.sleep(1); // Pause for 6 seconds
            }
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted");
        }
    }
}



2)
html
--------------
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
 <form method="post" action="CookieDemo">
<input type="radio" name="sub" value="Maths"> Maths <br>
  <input type="radio" name="sub" value="Physics"> Physics <br>    
<input type="radio" name="sub" value="Chemistry"> Chemistry<br>
        <input type="radio" name="sub" value="Biology"> Biology <br>
  <input type="submit" value="Submit">
    </form>   
     <form method="get" action="CookieDemo">  
  <input type="submit" value="reset">
    </form>

</body>
</html>
-----------------------------------------
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class CookieDemo
 */
@WebServlet("/CookieDemo")
public class CookieDemo extends HttpServlet {
    private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#HttpServlet()
     */
    public CookieDemo() {
        super();
        // TODO Auto-generated constructor stub
    }

    /**
     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        // response.getWriter().append("Served at: ").append(request.getContextPath());

        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        String s = request.getParameter("sub");

        Cookie c = new Cookie("sub", null); 
        out.println("Reset....");
    }

    /**
     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        doGet(request, response);
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        String s = request.getParameter("sub");
        
        Cookie c1 = new Cookie("sub", s);
        out.println("You have selected the subject: " + c1.getValue());
    }
}

***************************************************************************************************************
Slip 30

1)
import java.util.*;

class TreeSetDemo {
    public static void main(String args[]) {
        TreeSet ts = new TreeSet();
        ts.add("Red");
        ts.add("Yellow");
        ts.add("Blue");
        ts.add("Black");
        ts.add("Orange");
        ts.add("Green");

        System.out.println("TreeSet is: " + ts);
    }
}




2)
/////Customer.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action="Customer" method="GET">
            Enter Customer No:<input type="text" name="t1">
            <input type="submit" value="Submit">
        </form>

</body>
</html>
---------------------------------
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class Customer
 */
@WebServlet("/Customer")
public class Customer extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    
    Connection cn;
    public void init()
    {
       try
       {
            Class.forName("org.postgresql.Driver");
            cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word");
            
       }
       catch(Exception ce)
       {   
           System.out.println("Error"+ce.getMessage());
       }
 
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//response.getWriter().append("Served at: ").append(request.getContextPath());
	
	
	
		response.setContentType("text/html");
        PrintWriter out=response.getWriter();        
        try
        {
 
     /*   	Class.forName("org.postgresql.Driver");
           Connection cn=DriverManager.getConnection("jdbc:postgresql:tybcs","postgres","Pass@word"); */      	
        	int id=Integer.parseInt(request.getParameter("t1"));           
            
			String qry="select * from Customer1 where id="+id;
			
            
            Statement st=cn.createStatement();
            ResultSet rs=st.executeQuery(qry); 
            
            while(rs.next()) {
                out.print("<table border=1>");
                out.print("<tr>");
                out.print("<td>" + rs.getInt(1) + "</td>");
                out.print("<td>" + rs.getString(2) + "</td>");
                
                out.print("</tr>");
                out.print("</table>");
            
            }
        }
        catch(Exception se){
        	out.print(se);
        }
        out.close();
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
